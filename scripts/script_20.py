# –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
import csv
from pathlib import Path

def get_project_structure():
    base_path = Path("photo_geolocation")
    files_info = []
    
    if base_path.exists():
        for item in sorted(base_path.rglob("*")):
            if item.is_file() and not item.name.startswith('.'):
                relative_path = item.relative_to(base_path)
                try:
                    size = item.stat().st_size
                    with open(item, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = sum(1 for _ in f)
                except:
                    size = 0
                    lines = 0
                
                files_info.append({
                    'file_path': str(relative_path),
                    'directory': str(relative_path.parent),
                    'filename': item.name,
                    'extension': item.suffix or 'no_ext',
                    'size_bytes': size,
                    'lines_of_code': lines,
                    'file_type': get_file_type(item.suffix),
                    'description': get_file_description(str(relative_path))
                })
    
    return files_info

def get_file_type(extension):
    types = {
        '.py': 'Python',
        '.toml': 'Configuration', 
        '.yml': 'Configuration',
        '.yaml': 'Configuration',
        '.md': 'Documentation',
        '.txt': 'Text',
        '.env': 'Environment',
        '.example': 'Template',
        '.conf': 'Configuration',
        'no_ext': 'Script'
    }
    return types.get(extension, 'Other')

def get_file_description(filepath):
    descriptions = {
        'app/main.py': 'FastAPI application entry point with lifespan management',
        'app/core/config.py': 'Pydantic settings with environment variable support',
        'app/core/database.py': 'SQLAlchemy async database setup and session management',
        'app/models/schemas.py': 'Pydantic models for request/response validation',
        'app/models/database.py': 'SQLAlchemy ORM models for data persistence',
        'app/services/geolocation_service.py': 'Main geolocation orchestration service',
        'app/services/vision_service.py': 'Google Cloud Vision API integration',
        'app/services/geocoding_service.py': 'Multi-provider geocoding with fallbacks',
        'app/api/endpoints.py': 'FastAPI endpoints with comprehensive error handling',
        'app/utils/image_processing.py': 'PIL-based image processing and EXIF extraction',
        'app/utils/cache.py': 'Redis and memory caching with TTL support',
        'app/utils/geo_utils.py': 'Geographic calculations and coordinate utilities',
        'tests/conftest.py': 'Pytest configuration with async database setup',
        'tests/unit/test_image_processing.py': 'Unit tests for image processing utilities',
        'tests/integration/test_api.py': 'Integration tests for API endpoints',
        'pyproject.toml': 'Poetry configuration with dependencies and tools',
        'docker-compose.yml': 'Multi-container setup with PostgreSQL and Redis',
        'Dockerfile': 'Multi-stage Docker build with security hardening',
        'Makefile': 'Development automation and deployment commands',
        'README.md': 'Comprehensive project documentation and setup guide',
        '.env.example': 'Environment variables template with API key examples',
        'scripts/setup.py': 'Automated project setup and dependency installation',
        '.gitignore': 'Git ignore patterns for Python and development files',
        'docker/nginx.conf': 'Nginx reverse proxy configuration'
    }
    
    return descriptions.get(filepath, f'Project file: {filepath}')

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
files_info = get_project_structure()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
with open('photo_geolocation_structure.csv', 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['file_path', 'directory', 'filename', 'extension', 'size_bytes', 
                 'lines_of_code', 'file_type', 'description']
    
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    
    for file_info in files_info:
        writer.writerow(file_info)

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
total_files = len(files_info)
total_size = sum(f['size_bytes'] for f in files_info)
total_lines = sum(f['lines_of_code'] for f in files_info)
python_files = len([f for f in files_info if f['extension'] == '.py'])

print("üéâ PHOTO GEOLOCATION SERVICE - –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í!")
print("=" * 60)
print()

print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:")
print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
print(f"   üêç Python —Ñ–∞–π–ª–æ–≤: {python_files}")
print(f"   üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024/1024:.1f} MB)")
print(f"   üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines:,}")
print(f"   ‚öñÔ∏è  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_size//total_files if total_files else 0} –±–∞–π—Ç")
print()

print("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
key_components = [
    ('app/main.py', 'FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
    ('app/services/geolocation_service.py', '–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'),
    ('app/services/vision_service.py', 'Google Vision API'),
    ('app/services/geocoding_service.py', '–ú—É–ª—å—Ç–∏-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–µ–æ–∫–æ–¥–∏–Ω–≥'),
    ('app/api/endpoints.py', 'REST API endpoints'),
    ('app/utils/image_processing.py', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'),
    ('tests/', 'Comprehensive test suite')
]

for filepath, description in key_components:
    if filepath.endswith('/'):
        test_files = [f for f in files_info if f['directory'].startswith('tests')]
        total_test_lines = sum(f['lines_of_code'] for f in test_files)
        print(f"   {filepath:<35} - {total_test_lines:>4} —Å—Ç—Ä–æ–∫ - {description}")
    else:
        file_info = next((f for f in files_info if f['file_path'] == filepath), None)
        if file_info:
            print(f"   {filepath:<35} - {file_info['lines_of_code']:>4} —Å—Ç—Ä–æ–∫ - {description}")

print()
print("üöÄ –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö:")
tech_stack = [
    "FastAPI - Async web framework —Å –∞–≤—Ç–æ–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π",
    "SQLAlchemy 2.0 - ORM —Å async –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", 
    "Pydantic V2 - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è",
    "Google Cloud Vision - AI landmark detection –∏ OCR",
    "Multi-provider Geocoding - 4+ –≥–µ–æ–∫–æ–¥–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞",
    "Redis - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Å—Å–∏–∏",
    "PostgreSQL - Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
    "Pytest - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å async –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "Docker + Compose - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è",
    "Nginx - Reverse proxy"
]

for tech in tech_stack:
    print(f"   ‚úÖ {tech}")

print()
print("üí° –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –î–õ–Ø –•–ê–ö–ê–¢–û–ù–ê:")
features = [
    "üéØ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º",
    "ü§ñ AI-powered —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤", 
    "üìç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GPS –∏–∑ EXIF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
    "üî§ OCR —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥–æ–º",
    "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞",
    "‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (500ms - 3s)",
    "üìä Confidence scores –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ",
    "üåê RESTful API —Å OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π",
    "üê≥ Docker-ready –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è",
    "üß™ Comprehensive test coverage"
]

for feature in features:
    print(f"   {feature}")

print()
print("üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:")
print("   1. cd photo_geolocation")
print("   2. python scripts/setup.py")
print("   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env")
print("   4. make dev  # –∏–ª–∏ docker-compose up")
print("   5. –û—Ç–∫—Ä—ã—Ç—å http://localhost:8000/demo")
print()

print("üìã API ENDPOINTS:")
endpoints = [
    "POST /upload          - –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    "POST /batch-upload    - Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    "GET  /demo            - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞",  
    "GET  /health          - Health check —Å–µ—Ä–≤–∏—Å–∞",
    "GET  /stats           - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "GET  /docs            - Swagger UI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    "GET  /redoc           - ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
]

for endpoint in endpoints:
    print(f"   ‚Ä¢ {endpoint}")

print()
print("üåç –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ü–†–û–í–ê–ô–î–ï–†–´:")
providers = [
    "Google Cloud Vision API - landmark detection, OCR",
    "Google Maps Geocoding API - –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥",
    "LocationIQ - 5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "OpenCage - 2500 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", 
    "Nominatim (OpenStreetMap) - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
]

for provider in providers:
    print(f"   ‚Ä¢ {provider}")

print()
print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: photo_geolocation_structure.csv")
print()
print("üèÜ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –•–ê–ö–ê–¢–û–ù–£!")
print("   –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
print("   —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ production-ready –∫–∞—á–µ—Å—Ç–≤–æ–º!")